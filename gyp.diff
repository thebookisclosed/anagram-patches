diff --git a/pylib/gyp/MSVSSettings.py b/pylib/gyp/MSVSSettings.py
index 1d2e25ab..2c62de39 100644
--- a/pylib/gyp/MSVSSettings.py
+++ b/pylib/gyp/MSVSSettings.py
@@ -825,7 +825,8 @@ _target_machine_enumeration = _Enumeration(
      'MachineSH4',  # /MACHINE:SH4
      None,
      'MachineTHUMB',  # /MACHINE:THUMB
-     'MachineX64'])  # /MACHINE:X64
+     'MachineX64',  # /MACHINE:X64
+     'MachineARM64'])  # /MACHINE:ARM64
 
 _Same(_link, 'AssemblyDebug',
       _Enumeration(['',
@@ -979,7 +980,8 @@ _Same(_midl, 'TargetEnvironment',
       _Enumeration(['NotSet',
                     'Win32',  # /env win32
                     'Itanium',  # /env ia64
-                    'X64']))  # /env x64
+                    'X64',  # /env x64
+                    'ARM64']))  # /env arm64
 _Same(_midl, 'EnableErrorChecks',
       _Enumeration(['EnableCustom',
                     'None',  # /error none
diff --git a/pylib/gyp/MSVSVersion.py b/pylib/gyp/MSVSVersion.py
index 71582ccd..394fd1df 100644
--- a/pylib/gyp/MSVSVersion.py
+++ b/pylib/gyp/MSVSVersion.py
@@ -83,7 +83,7 @@ class VisualStudioVersion(object):
   def _SetupScriptInternal(self, target_arch):
     """Returns a command (with arguments) to be used to set up the
     environment."""
-    assert target_arch in ('x86', 'x64'), "target_arch not supported"
+    assert target_arch in ('x86', 'x64', 'arm64'), "target_arch not supported"
     # If WindowsSDKDir is set and SetEnv.Cmd exists then we are using the
     # depot_tools build tools and should run SetEnv.Cmd to set up the
     # environment. The check for WindowsSDKDir alone is not sufficient because
@@ -105,7 +105,7 @@ class VisualStudioVersion(object):
 
       # Always use a native executable, cross-compiling if necessary.
       host_arch = 'amd64' if is_host_arch_x64 else 'x86'
-      msvc_target_arch = 'amd64' if target_arch == 'x64' else 'x86'
+      msvc_target_arch = 'amd64' if target_arch == 'x64' else 'arm64' if target_arch == 'arm64' else 'x86'
       arg = host_arch
       if host_arch != msvc_target_arch:
         arg += '_' + msvc_target_arch
@@ -166,7 +166,7 @@ def _RegistryQueryBase(sysdir, key, value):
   p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
   # Obtain the stdout from reg.exe, reading to the end so p.returncode is valid
   # Note that the error text may be in [1] in some cases
-  text = p.communicate()[0]
+  text = p.communicate()[0].decode('utf-8', 'ignore')
   # Check return code from reg.exe; officially 0==success and 1==error
   if p.returncode:
     return None
@@ -282,7 +282,7 @@ def _CreateVersion(name, path, sdk_based=False):
                                   uses_vcxproj=True,
                                   path=path,
                                   sdk_based=sdk_based,
-                                  default_toolset='v141',
+                                  default_toolset='v142',
                                   compatible_sdks=['v8.1', 'v10.0']),
       '2017': VisualStudioVersion('2017',
                                   'Visual Studio 2017',
@@ -395,7 +395,7 @@ def _ConvertToCygpath(path):
   """Convert to cygwin path if we are using cygwin."""
   if sys.platform == 'cygwin':
     p = subprocess.Popen(['cygpath', path], stdout=subprocess.PIPE)
-    path = p.communicate()[0].strip()
+    path = p.communicate()[0].decode('utf-8', 'ignore').strip()
   return path
 
 
diff --git a/pylib/gyp/generator/cmake.py b/pylib/gyp/generator/cmake.py
index 4a2041cf..e5333926 100644
--- a/pylib/gyp/generator/cmake.py
+++ b/pylib/gyp/generator/cmake.py
@@ -1078,6 +1078,23 @@ def WriteTarget(namer, qualified_target, target_dicts, build_dir, config_to_use,
 
       output.write(')\n')
 
+  # Precompile header
+  precompiled_header = config.get('cmake_precompiled_header', '')
+  if precompiled_header:
+    precompiled_header_script = config.get('cmake_precompiled_header_script', '')
+    if not precompiled_header_script:
+      print ('ERROR: cmake_precompiled_header requires cmake_precompiled_header_script')
+    cmake_precompiled_header = NormjoinPath(path_from_cmakelists_to_gyp, precompiled_header)
+    cmake_precompiled_header_script = NormjoinPathForceCMakeSource(path_from_cmakelists_to_gyp, precompiled_header_script)
+    output.write('include(')
+    output.write(cmake_precompiled_header_script)
+    output.write(')\n')
+    output.write('add_precompiled_header(')
+    output.write(cmake_target_name)
+    output.write(' ')
+    output.write(cmake_precompiled_header)
+    output.write(')\n')
+
   UnsetVariable(output, 'TOOLSET')
   UnsetVariable(output, 'TARGET')
 
@@ -1120,6 +1137,8 @@ def GenerateOutputForConfig(target_list, target_dicts, data,
   SetVariable(output, 'configuration', config_to_use)
 
   ar = None
+  ranlib = None
+  nm = None
   cc = None
   cxx = None
 
@@ -1129,17 +1148,27 @@ def GenerateOutputForConfig(target_list, target_dicts, data,
   for key, value in make_global_settings:
     if key == 'AR':
       ar = os.path.join(build_to_top, value)
+    if key == 'RANLIB':
+      ranlib = os.path.join(build_to_top, value)
+    if key == 'NM':
+      nm = os.path.join(build_to_top, value)
     if key == 'CC':
       cc = os.path.join(build_to_top, value)
     if key == 'CXX':
       cxx = os.path.join(build_to_top, value)
 
   ar = gyp.common.GetEnvironFallback(['AR_target', 'AR'], ar)
+  ranlib = gyp.common.GetEnvironFallback(['RANLIB_target', 'RANLIB'], ranlib)
+  nm = gyp.common.GetEnvironFallback(['NM_target', 'NM'], nm)
   cc = gyp.common.GetEnvironFallback(['CC_target', 'CC'], cc)
   cxx = gyp.common.GetEnvironFallback(['CXX_target', 'CXX'], cxx)
 
   if ar:
     SetVariable(output, 'CMAKE_AR', ar)
+  if ranlib:
+    SetVariable(output, 'CMAKE_RANLIB', ranlib)
+  if nm:
+    SetVariable(output, 'CMAKE_NM', nm)
   if cc:
     SetVariable(output, 'CMAKE_C_COMPILER', cc)
   if cxx:
diff --git a/pylib/gyp/generator/msvs.py b/pylib/gyp/generator/msvs.py
index 843e7067..0cf5369e 100644
--- a/pylib/gyp/generator/msvs.py
+++ b/pylib/gyp/generator/msvs.py
@@ -116,7 +116,7 @@ def _GetDomainAndUserName():
     if not domain or not username:
       call = subprocess.Popen(['net', 'config', 'Workstation'],
                               stdout=subprocess.PIPE)
-      config = call.communicate()[0]
+      config = call.communicate()[0].decode('utf-8', 'ignore')
       username_re = re.compile(r'^User name\s+(\S+)', re.MULTILINE)
       username_match = username_re.search(config)
       if username_match:
@@ -1904,6 +1904,8 @@ def _InitNinjaFlavor(params, target_list, target_dicts):
       configuration = '$(Configuration)'
       if params.get('target_arch') == 'x64':
         configuration += '_x64'
+      elif params.get('target_arch') == 'arm64':
+        configuration += '_arm64'
       spec['msvs_external_builder_out_dir'] = os.path.join(
           gyp.common.RelativePath(params['options'].toplevel_dir, gyp_dir),
           ninja_generator.ComputeOutputDir(params),
diff --git a/pylib/gyp/generator/ninja.py b/pylib/gyp/generator/ninja.py
index bf04e567..3703b94d 100644
--- a/pylib/gyp/generator/ninja.py
+++ b/pylib/gyp/generator/ninja.py
@@ -242,7 +242,7 @@ class NinjaWriter(object):
     if flavor == 'win':
       # See docstring of msvs_emulation.GenerateEnvironmentFiles().
       self.win_env = {}
-      for arch in ('x86', 'x64'):
+      for arch in ('x86', 'x64', 'arm64'):
         self.win_env[arch] = 'environment.' + arch
 
     # Relative path from build output dir to base dir.
diff --git a/pylib/gyp/generator/xcode.py b/pylib/gyp/generator/xcode.py
index 8bc22bed..24bee427 100644
--- a/pylib/gyp/generator/xcode.py
+++ b/pylib/gyp/generator/xcode.py
@@ -74,6 +74,12 @@ generator_additional_non_configuration_keys = [
   'ios_app_extension',
   'ios_watch_app',
   'ios_watchkit_extension',
+
+  'mac_sandbox', # sandbox support
+  'mac_sandbox_development_team',
+
+  'mac_hardened_runtime', # hardened runtime support
+
   'mac_bundle',
   'mac_bundle_resources',
   'mac_framework_headers',
@@ -774,6 +780,39 @@ def GenerateOutput(target_list, target_dicts, data, params):
     xcode_targets[qualified_target] = xct
     xcode_target_to_target_dict[xct] = spec
 
+    # sandbox and hardened runtime support
+    is_sandbox = int(spec.get('mac_sandbox', 0))
+    is_hardened_runtime = int(spec.get('mac_hardened_runtime', 0))
+    if is_sandbox or is_hardened_runtime:
+      try:
+        tmp = pbxp._properties['attributes']['TargetAttributes']
+      except KeyError:
+        pbxp._properties['attributes']['TargetAttributes'] = {}
+      try:
+        tmp = pbxp._properties['attributes']['TargetAttributes'][xct]
+      except KeyError:
+        pbxp._properties['attributes']['TargetAttributes'][xct] = {}
+      try:
+        tmp = pbxp._properties['attributes']['TargetAttributes'][xct]['SystemCapabilities']
+      except KeyError:
+        pbxp._properties['attributes']['TargetAttributes'][xct]['SystemCapabilities'] = {}
+
+    if is_sandbox:
+      dev_team = spec.get('mac_sandbox_development_team', '%%ERROR%%')
+      assert dev_team != '%%ERROR%%', (
+          'mac_sandbox must be accompanied by mac_sandbox_development_team (target "%s")' %
+          target_name)
+      pbxp._properties['attributes']['TargetAttributes'][xct]['DevelopmentTeam'] = dev_team
+      pbxp._properties['attributes']['TargetAttributes'][xct]['SystemCapabilities']['com.apple.Sandbox'] = {
+        'enabled': 1,
+      }
+
+    # hardened runtime support
+    if is_hardened_runtime:
+      pbxp._properties['attributes']['TargetAttributes'][xct]['SystemCapabilities']['com.apple.HardenedRuntime'] = {
+        'enabled': 1,
+      }
+
     spec_actions = spec.get('actions', [])
     spec_rules = spec.get('rules', [])
 
@@ -1132,7 +1171,8 @@ exit 1
         groups = [x for x in groups if not x.endswith('_excluded')]
       for group in groups:
         for item in rule.get(group, []):
-          pbxp.AddOrGetFileInRootGroup(item)
+          concrete_item = ExpandXcodeVariables(item, rule_input_dict)
+          pbxp.AddOrGetFileInRootGroup(concrete_item)
 
     # Add "sources".
     for source in spec.get('sources', []):
diff --git a/pylib/gyp/input.py b/pylib/gyp/input.py
index 4c128916..2bea3341 100644
--- a/pylib/gyp/input.py
+++ b/pylib/gyp/input.py
@@ -1183,7 +1183,7 @@ def LoadVariablesFromVariablesDict(variables, the_dict, the_dict_key):
       if variable_name in variables:
         # If the variable is already set, don't set it.
         continue
-      if the_dict_key is 'variables' and variable_name in the_dict:
+      if the_dict_key == 'variables' and variable_name in the_dict:
         # If the variable is set without a % in the_dict, and the_dict is a
         # variables dict (making |variables| a varaibles sub-dict of a
         # variables dict), use the_dict's definition.
diff --git a/pylib/gyp/msvs_emulation.py b/pylib/gyp/msvs_emulation.py
index 63d40e63..45003d42 100644
--- a/pylib/gyp/msvs_emulation.py
+++ b/pylib/gyp/msvs_emulation.py
@@ -254,7 +254,7 @@ class MsvsSettings(object):
   def GetVSMacroEnv(self, base_to_build=None, config=None):
     """Get a dict of variables mapping internal VS macro names to their gyp
     equivalents."""
-    target_platform = 'Win32' if self.GetArch(config) == 'x86' else 'x64'
+    target_platform = 'Win32' if self.GetArch(config) == 'x86' else 'arm64' if self.GetArch(config) == 'arm64' else 'x64'
     target_name = self.spec.get('product_prefix', '') + \
         self.spec.get('product_name', self.spec['target_name'])
     target_dir = base_to_build + '\\' if base_to_build else ''
@@ -317,7 +317,7 @@ class MsvsSettings(object):
     if not platform: # If no specific override, use the configuration's.
       platform = configuration_platform
     # Map from platform to architecture.
-    return {'Win32': 'x86', 'x64': 'x64'}.get(platform, 'x86')
+    return {'Win32': 'x86', 'x64': 'x64', 'arm64': 'arm64'}.get(platform, 'x86')
 
   def _TargetConfig(self, config):
     """Returns the target-specific configuration."""
@@ -333,6 +333,8 @@ class MsvsSettings(object):
     arch = self.GetArch(config)
     if arch == 'x64' and not config.endswith('_x64'):
       config += '_x64'
+    if arch == 'arm64' and not config.endswith('_arm64'):
+      config += '_arm64'
     if arch == 'x86' and config.endswith('_x64'):
       config = config.rsplit('_', 1)[0]
     return config
@@ -543,7 +545,7 @@ class MsvsSettings(object):
     libflags.extend(self._GetAdditionalLibraryDirectories(
         'VCLibrarianTool', config, gyp_to_build_path))
     lib('LinkTimeCodeGeneration', map={'true': '/LTCG'})
-    lib('TargetMachine', map={'1': 'X86', '17': 'X64', '3': 'ARM'},
+    lib('TargetMachine', map={'1': 'X86', '17': 'X64', '3': 'ARM', '18': 'ARM64'},
         prefix='/MACHINE:')
     lib('AdditionalOptions')
     return libflags
@@ -588,7 +590,7 @@ class MsvsSettings(object):
                           'VCLinkerTool', append=ldflags)
     self._GetDefFileAsLdflags(ldflags, gyp_to_build_path)
     ld('GenerateDebugInformation', map={'true': '/DEBUG'})
-    ld('TargetMachine', map={'1': 'X86', '17': 'X64', '3': 'ARM'},
+    ld('TargetMachine', map={'1': 'X86', '17': 'X64', '3': 'ARM', '18': 'ARM64'},
        prefix='/MACHINE:')
     ldflags.extend(self._GetAdditionalLibraryDirectories(
         'VCLinkerTool', config, gyp_to_build_path))
@@ -883,7 +885,7 @@ class MsvsSettings(object):
                  ('iid', iid),
                  ('proxy', proxy)]
     # TODO(scottmg): Are there configuration settings to set these flags?
-    target_platform = 'win32' if self.GetArch(config) == 'x86' else 'x64'
+    target_platform = 'win32' if self.GetArch(config) == 'x86' else 'arm64' if self.GetArch(config) == 'arm64' else 'x64'
     flags = ['/char', 'signed', '/env', target_platform, '/Oicf']
     return outdir, output, variables, flags
 
@@ -1041,7 +1043,7 @@ def GenerateEnvironmentFiles(toplevel_build_dir, generator_flags,
   meet your requirement (e.g. for custom toolchains), you can pass
   "-G ninja_use_custom_environment_files" to the gyp to suppress file
   generation and use custom environment files prepared by yourself."""
-  archs = ('x86', 'x64')
+  archs = ('x86', 'x64', 'arm64')
   if generator_flags.get('ninja_use_custom_environment_files', 0):
     cl_paths = {}
     for arch in archs:
@@ -1059,6 +1061,7 @@ def GenerateEnvironmentFiles(toplevel_build_dir, generator_flags,
     variables, _ = popen.communicate()
     if popen.returncode != 0:
       raise Exception('"%s" failed with error %d' % (args, popen.returncode))
+    variables = variables.decode('utf-8', 'ignore')
     env = _ExtractImportantEnvironment(variables)
 
     # Inject system includes from gyp files into INCLUDE.
@@ -1079,6 +1082,7 @@ def GenerateEnvironmentFiles(toplevel_build_dir, generator_flags,
     popen = subprocess.Popen(args, shell=True, stdout=subprocess.PIPE,
                              universal_newlines=True)
     output, _ = popen.communicate()
+    output = output.decode('utf-8', 'ignore')
     cl_paths[arch] = _ExtractCLPath(output)
   return cl_paths
 
diff --git a/pylib/gyp/win_tool.py b/pylib/gyp/win_tool.py
index 89734846..957f00f5 100755
--- a/pylib/gyp/win_tool.py
+++ b/pylib/gyp/win_tool.py
@@ -133,6 +133,7 @@ class WinTool(object):
                             stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
                             universal_newlines=True)
     out, _ = link.communicate()
+    out = out.decode('utf-8', 'ignore')
     for line in out.splitlines():
       if (not line.startswith('   Creating library ') and
           not line.startswith('Generating code') and
@@ -227,6 +228,7 @@ class WinTool(object):
                              stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
                              universal_newlines=True)
     out, _ = popen.communicate()
+    out = out.decode(sys.stdout.encoding, 'ignore')
     for line in out.splitlines():
       if line and 'manifest authoring warning 81010002' not in line:
         print(line)
@@ -260,6 +262,7 @@ class WinTool(object):
                              stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
                              universal_newlines=True)
     out, _ = popen.communicate()
+    out = out.decode('utf-8', 'ignore')
     # Filter junk out of stdout, and write filtered versions. Output we want
     # to filter is pairs of lines that look like this:
     # Processing C:\Program Files (x86)\Microsoft SDKs\...\include\objidl.idl
@@ -280,6 +283,7 @@ class WinTool(object):
                              stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
                              universal_newlines=True)
     out, _ = popen.communicate()
+    out = out.decode('utf-8', 'ignore')
     for line in out.splitlines():
       if (not line.startswith('Copyright (C) Microsoft Corporation') and
           not line.startswith('Microsoft (R) Macro Assembler') and
@@ -296,6 +300,7 @@ class WinTool(object):
                              stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
                              universal_newlines=True)
     out, _ = popen.communicate()
+    out = out.decode('utf-8', 'ignore')
     for line in out.splitlines():
       if (not line.startswith('Microsoft (R) Windows (R) Resource Compiler') and
           not line.startswith('Copyright (C) Microsoft Corporation') and
